AWSTemplateFormatVersion: "2010-09-09"
Description: AWS-STUDY

Parameters:
  KeyName:
    Type: String
    Description: EC2 Key Pair
    Default: takatoseki

  DBPassword:
    NoEcho: true
    Type: String
    MinLength: 8
    Description: "The database admin password"

  NamePrefix:
    Type: String
    Default: aws-study
    Description: "リソース名の接頭辞（小文字推奨）"

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyInternetGateway
      VpcId: !Ref MyVPC

  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-northeast-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  MyPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  MyPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: ap-northeast-1c
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  PublicSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet1
      RouteTableId: !Ref MyRouteTable

  PublicSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet2
      RouteTableId: !Ref MyRouteTable

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 221.49.49.27/32
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-095af7cb7ddb447ef # Amazon Linux 2 のAMI
      SubnetId: !Ref MyPublicSubnet1 # Publicサブネットに配置
      SecurityGroupIds:
        - !Ref EC2SecurityGroup

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Protocol: HTTP
      Port: 8080
      TargetType: instance
      Targets:
        - Id: !Ref MyEC2Instance
      HealthCheckPath: /
      Matcher:
        HttpCode: 200

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Scheme: internet-facing
      Subnets:
        - !Ref MyPublicSubnet1
        - !Ref MyPublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # ALBリスナー(80で受けて8080で転送)
  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: My DB subnet group
      SubnetIds:
        - !Ref MyPrivateSubnet1
        - !Ref MyPrivateSubnet2

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      EngineVersion: "8.0"
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false

  EC2CPUUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "aws-study-cpu-utilization-alarm"
      AlarmDescription: "Aws-Study EC2のCPU使用率が70%以上になりました。"
      Namespace: "AWS/EC2"
      Dimensions:
        - Name: "InstanceId"
          Value: !Ref MyEC2Instance
      MetricName: "CPUUtilization"
      Unit: "Percent"
      Period: 300
      Statistic: "Average"
      Threshold: 70
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      EvaluationPeriods: 3
      DatapointsToAlarm: 2
      TreatMissingData: "missing"
      ActionsEnabled: true
      AlarmActions:
        - arn:aws:sns:ap-northeast-1:913925038760:AWS-Study-Topic

  # Web ACL本体
  MyWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub "${NamePrefix}-waf"
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      Description: "AWS-Study Web ACL for ALB"
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub "${NamePrefix}-waf"
      Rules:
        - Name: "AWSCommonRules"
          Priority: 1
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesCommonRuleSet"
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub "${NamePrefix}-common-rules"

  # Web ACLとALBの関連付け
  MyWebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    DependsOn: MyLoadBalancer # ← 追加（安定化）
    Properties:
      ResourceArn: !Ref MyLoadBalancer
      WebACLArn: !GetAtt MyWebACL.Arn

  #ロググループ
  WAFLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "aws-waf-logs-${NamePrefix}-waf"
      RetentionInDays: 7

  # ログ設定
  MyWebACLLoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      ResourceArn: !GetAtt MyWebACL.Arn
      LogDestinationConfigs:
        - !GetAtt WAFLogGroup.Arn
